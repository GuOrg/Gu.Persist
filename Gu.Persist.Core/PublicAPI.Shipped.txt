Gu.Persist.Core.Backup.BackupFile
Gu.Persist.Core.Backup.BackupFile.File.get -> System.IO.FileInfo
Gu.Persist.Core.Backup.BackupFile.TimeStamp.get -> System.DateTime
Gu.Persist.Core.Backup.Backuper
Gu.Persist.Core.Backup.Backuper.BackupExtensions.get -> string[]
Gu.Persist.Core.Backup.Backuper.Backuper(Gu.Persist.Core.IBackupSettings setting) -> void
Gu.Persist.Core.Backup.Backuper.CanRename(System.IO.FileInfo file, string newName) -> bool
Gu.Persist.Core.Backup.Backuper.CanRestore(System.IO.FileInfo file) -> bool
Gu.Persist.Core.Backup.Backuper.DeleteBackups(System.IO.FileInfo file) -> void
Gu.Persist.Core.Backup.Backuper.GetRenamePairs(System.IO.FileInfo file, string newName) -> System.Collections.Generic.IReadOnlyList<Gu.Persist.Core.RenamePair>
Gu.Persist.Core.Backup.Backuper.Rename(System.IO.FileInfo file, string newName, bool overWrite) -> void
Gu.Persist.Core.Backup.Backuper.Setting.get -> Gu.Persist.Core.IBackupSettings
Gu.Persist.Core.Backup.NullBackuper
Gu.Persist.Core.Backup.NullBackuper.AfterSave(Gu.Persist.Core.LockedFile file) -> void
Gu.Persist.Core.Backup.NullBackuper.BeforeSave(System.IO.FileInfo file) -> bool
Gu.Persist.Core.Backup.NullBackuper.CanRename(System.IO.FileInfo file, string newName) -> bool
Gu.Persist.Core.Backup.NullBackuper.CanRestore(System.IO.FileInfo file) -> bool
Gu.Persist.Core.Backup.NullBackuper.DeleteBackups(System.IO.FileInfo file) -> void
Gu.Persist.Core.Backup.NullBackuper.GetRenamePairs(System.IO.FileInfo file, string newName) -> System.Collections.Generic.IReadOnlyList<Gu.Persist.Core.RenamePair>
Gu.Persist.Core.Backup.NullBackuper.Rename(System.IO.FileInfo file, string newName, bool overWrite) -> void
Gu.Persist.Core.Backup.NullBackuper.TryRestore(System.IO.FileInfo file) -> bool
Gu.Persist.Core.BackupSettings
Gu.Persist.Core.BackupSettings.BackupSettings(string directory, string extension, string timeStampFormat, int numberOfBackups, int maxAgeInDays) -> void
Gu.Persist.Core.BackupSettings.MaxAgeInDays.get -> int
Gu.Persist.Core.BackupSettings.NumberOfBackups.get -> int
Gu.Persist.Core.BackupSettings.TimeStampFormat.get -> string
Gu.Persist.Core.DataRepository<TSetting>
Gu.Persist.Core.DataRepository<TSetting>.DataRepository(System.Func<TSetting> settingsCreator, Gu.Persist.Core.IBackuper backuper, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.DataRepository<TSetting>.DataRepository(System.Func<TSetting> settingsCreator, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.DataRepository<TSetting>.DataRepository(TSetting settings, Gu.Persist.Core.IBackuper backuper, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.DataRepository<TSetting>.DataRepository(TSetting settings, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.DataRepositorySettings
Gu.Persist.Core.DataRepositorySettings.DataRepositorySettings(string directory, bool isTrackingDirty, bool saveNullDeletesFile, Gu.Persist.Core.BackupSettings backupSettings, string extension = ".cfg", string tempExtension = ".tmp") -> void
Gu.Persist.Core.DataRepositorySettings.SaveNullDeletesFile.get -> bool
Gu.Persist.Core.Default
Gu.Persist.Core.Directories
Gu.Persist.Core.DirectoryInfoComparer
Gu.Persist.Core.DirtyTracker
Gu.Persist.Core.DirtyTracker.ClearCache() -> void
Gu.Persist.Core.DirtyTracker.DirtyTracker(Gu.Persist.Core.ICloner cloner) -> void
Gu.Persist.Core.DirtyTracker.IsDirty<T>(string fullFileName, T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
Gu.Persist.Core.DirtyTracker.RemoveFromCache(string fullFileName) -> void
Gu.Persist.Core.DirtyTracker.Rename(string oldName, string newName, bool owerWrite) -> void
Gu.Persist.Core.DirtyTracker.Track<T>(string fullFileName, T item) -> void
Gu.Persist.Core.FileCache
Gu.Persist.Core.FileCache.Add<T>(string fullName, T value) -> void
Gu.Persist.Core.FileCache.ChangeKey(string from, string to, bool overWrite) -> void
Gu.Persist.Core.FileCache.Clear() -> void
Gu.Persist.Core.FileCache.ContainsKey(string fullName) -> bool
Gu.Persist.Core.FileCache.FileCache() -> void
Gu.Persist.Core.FileCache.TryGetValue<T>(string fullFileName, out T cached) -> bool
Gu.Persist.Core.FileCache.TryRemove<T>(T item) -> void
Gu.Persist.Core.FileInfoComparer
Gu.Persist.Core.FileInfoComparer.FileInfoComparer() -> void
Gu.Persist.Core.FileSettings
Gu.Persist.Core.FileSettings.Directory.get -> string
Gu.Persist.Core.FileSettings.Extension.get -> string
Gu.Persist.Core.FileSettings.FileSettings(string directory, string extension) -> void
Gu.Persist.Core.IAsyncRepository
Gu.Persist.Core.IAsyncRepository.Exists(System.IO.FileInfo file) -> bool
Gu.Persist.Core.IAsyncRepository.Exists(string fileName) -> bool
Gu.Persist.Core.IAsyncRepository.Exists<T>() -> bool
Gu.Persist.Core.IAsyncRepository.GetFileInfo(string fileName) -> System.IO.FileInfo
Gu.Persist.Core.IAsyncRepository.GetFileInfo<T>() -> System.IO.FileInfo
Gu.Persist.Core.IAsyncRepository.Settings.get -> Gu.Persist.Core.IRepositorySettings
Gu.Persist.Core.IBackupSettings
Gu.Persist.Core.IBackupSettings.MaxAgeInDays.get -> int
Gu.Persist.Core.IBackupSettings.NumberOfBackups.get -> int
Gu.Persist.Core.IBackupSettings.TimeStampFormat.get -> string
Gu.Persist.Core.IBackuper
Gu.Persist.Core.IBackuper.AfterSave(Gu.Persist.Core.LockedFile file) -> void
Gu.Persist.Core.IBackuper.Backup(Gu.Persist.Core.LockedFile file) -> void
Gu.Persist.Core.IBackuper.Backup(System.IO.FileInfo file) -> void
Gu.Persist.Core.IBackuper.Backup(System.IO.FileInfo file, System.IO.FileInfo backup) -> void
Gu.Persist.Core.IBackuper.BeforeSave(System.IO.FileInfo file) -> bool
Gu.Persist.Core.IBackuper.CanRename(System.IO.FileInfo file, string newName) -> bool
Gu.Persist.Core.IBackuper.CanRestore(System.IO.FileInfo file) -> bool
Gu.Persist.Core.IBackuper.DeleteBackups(System.IO.FileInfo file) -> void
Gu.Persist.Core.IBackuper.GetRenamePairs(System.IO.FileInfo file, string newName) -> System.Collections.Generic.IReadOnlyList<Gu.Persist.Core.RenamePair>
Gu.Persist.Core.IBackuper.Rename(System.IO.FileInfo file, string newName, bool overWrite) -> void
Gu.Persist.Core.IBackuper.TryRestore(System.IO.FileInfo file) -> bool
Gu.Persist.Core.IBlockingRepository
Gu.Persist.Core.IBlockingRepository.Exists(System.IO.FileInfo file) -> bool
Gu.Persist.Core.IBlockingRepository.Exists(string fileName) -> bool
Gu.Persist.Core.IBlockingRepository.Exists<T>() -> bool
Gu.Persist.Core.IBlockingRepository.GetFileInfo(string fileName) -> System.IO.FileInfo
Gu.Persist.Core.IBlockingRepository.GetFileInfo<T>() -> System.IO.FileInfo
Gu.Persist.Core.IBlockingRepository.Settings.get -> Gu.Persist.Core.IRepositorySettings
Gu.Persist.Core.ICloner
Gu.Persist.Core.ICloner.Clone<T>(T item) -> T
Gu.Persist.Core.IDataRepository
Gu.Persist.Core.IDataRepository.Delete(System.IO.FileInfo file, bool deleteBackups) -> void
Gu.Persist.Core.IDataRepository.Delete(string fileName, bool deleteBackups) -> void
Gu.Persist.Core.IDataRepository.Delete<T>(bool deleteBackups) -> void
Gu.Persist.Core.IDataRepositorySettings
Gu.Persist.Core.IDataRepositorySettings.SaveNullDeletesFile.get -> bool
Gu.Persist.Core.IDirty
Gu.Persist.Core.IDirty.IsDirty<T>(System.IO.FileInfo file, T item) -> bool
Gu.Persist.Core.IDirty.IsDirty<T>(System.IO.FileInfo file, T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
Gu.Persist.Core.IDirty.IsDirty<T>(T item) -> bool
Gu.Persist.Core.IDirty.IsDirty<T>(T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
Gu.Persist.Core.IDirty.IsDirty<T>(string fileName, T item) -> bool
Gu.Persist.Core.IDirty.IsDirty<T>(string fileName, T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
Gu.Persist.Core.IDirtyTracker
Gu.Persist.Core.IDirtyTracker.ClearCache() -> void
Gu.Persist.Core.IDirtyTracker.IsDirty<T>(string fullFileName, T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
Gu.Persist.Core.IDirtyTracker.RemoveFromCache(string fullFileName) -> void
Gu.Persist.Core.IDirtyTracker.Rename(string oldName, string newName, bool owerWrite) -> void
Gu.Persist.Core.IDirtyTracker.Track<T>(string fullFileName, T item) -> void
Gu.Persist.Core.IFileInfoAsyncRepository
Gu.Persist.Core.IFileInfoAsyncRepository.ReadAsync<T>(System.IO.FileInfo file) -> System.Threading.Tasks.Task<T>
Gu.Persist.Core.IFileInfoAsyncRepository.SaveAsync<T>(System.IO.FileInfo file, T item) -> System.Threading.Tasks.Task
Gu.Persist.Core.IFileInfoAsyncStreamRepository
Gu.Persist.Core.IFileInfoAsyncStreamRepository.ReadAsync(System.IO.FileInfo file) -> System.Threading.Tasks.Task<System.IO.Stream>
Gu.Persist.Core.IFileInfoAsyncStreamRepository.SaveAsync(System.IO.FileInfo file, System.IO.FileInfo tempFile, System.IO.Stream stream) -> System.Threading.Tasks.Task
Gu.Persist.Core.IFileInfoAsyncStreamRepository.SaveAsync(System.IO.FileInfo file, System.IO.Stream stream) -> System.Threading.Tasks.Task
Gu.Persist.Core.IFileInfoRepository
Gu.Persist.Core.IFileInfoRepository.Read<T>(System.IO.FileInfo file) -> T
Gu.Persist.Core.IFileInfoRepository.Save<T>(System.IO.FileInfo file, T item) -> void
Gu.Persist.Core.IFileInfoStreamRepository
Gu.Persist.Core.IFileInfoStreamRepository.Read(System.IO.FileInfo file) -> System.IO.Stream
Gu.Persist.Core.IFileInfoStreamRepository.Save(System.IO.FileInfo file, System.IO.FileInfo tempFile, System.IO.Stream stream) -> void
Gu.Persist.Core.IFileInfoStreamRepository.Save(System.IO.FileInfo file, System.IO.Stream stream) -> void
Gu.Persist.Core.IFileNameAsyncRepository
Gu.Persist.Core.IFileNameAsyncRepository.ReadAsync<T>(string fileName) -> System.Threading.Tasks.Task<T>
Gu.Persist.Core.IFileNameAsyncRepository.SaveAsync<T>(string fileName, T item) -> System.Threading.Tasks.Task
Gu.Persist.Core.IFileNameAsyncStreamRepository
Gu.Persist.Core.IFileNameAsyncStreamRepository.ReadAsync(string fileName) -> System.Threading.Tasks.Task<System.IO.Stream>
Gu.Persist.Core.IFileNameAsyncStreamRepository.SaveAsync(string fileName, System.IO.Stream stream) -> System.Threading.Tasks.Task
Gu.Persist.Core.IFileNameRepository
Gu.Persist.Core.IFileNameRepository.Read<T>(string fileName) -> T
Gu.Persist.Core.IFileNameRepository.Save<T>(string fileName, T item) -> void
Gu.Persist.Core.IFileNameStreamRepository
Gu.Persist.Core.IFileNameStreamRepository.Read(string fileName) -> System.IO.Stream
Gu.Persist.Core.IFileNameStreamRepository.Save(string fileName, System.IO.Stream stream) -> void
Gu.Persist.Core.IFileSettings
Gu.Persist.Core.IFileSettings.Directory.get -> string
Gu.Persist.Core.IFileSettings.Extension.get -> string
Gu.Persist.Core.IGenericAsyncRepository
Gu.Persist.Core.IGenericAsyncRepository.ReadAsync<T>() -> System.Threading.Tasks.Task<T>
Gu.Persist.Core.IGenericAsyncRepository.SaveAsync<T>(T item) -> System.Threading.Tasks.Task
Gu.Persist.Core.IGenericAsyncStreamRepository
Gu.Persist.Core.IGenericAsyncStreamRepository.ReadAsync<T>() -> System.Threading.Tasks.Task<System.IO.Stream>
Gu.Persist.Core.IGenericAsyncStreamRepository.SaveAsync<T>(System.IO.Stream stream) -> System.Threading.Tasks.Task
Gu.Persist.Core.IGenericRepository
Gu.Persist.Core.IGenericRepository.Read<T>() -> T
Gu.Persist.Core.IGenericRepository.Save<T>(T item) -> void
Gu.Persist.Core.IGenericStreamRepository
Gu.Persist.Core.IGenericStreamRepository.Read<T>() -> System.IO.Stream
Gu.Persist.Core.IGenericStreamRepository.Save<T>(System.IO.Stream stream) -> void
Gu.Persist.Core.IPooledStream
Gu.Persist.Core.IPooledStream.GetBuffer() -> byte[]
Gu.Persist.Core.IPooledStream.Length.get -> long
Gu.Persist.Core.IRepository
Gu.Persist.Core.IRepository.Backuper.get -> Gu.Persist.Core.IBackuper
Gu.Persist.Core.IRepository.CanRename(System.IO.FileInfo oldName, System.IO.FileInfo newName) -> bool
Gu.Persist.Core.IRepository.CanRename(System.IO.FileInfo oldName, string newName) -> bool
Gu.Persist.Core.IRepository.CanRename(string oldName, string newName) -> bool
Gu.Persist.Core.IRepository.CanRename<T>(string newName) -> bool
Gu.Persist.Core.IRepository.ClearTrackerCache() -> void
Gu.Persist.Core.IRepository.DeleteBackups(System.IO.FileInfo file) -> void
Gu.Persist.Core.IRepository.DeleteBackups(string fileName) -> void
Gu.Persist.Core.IRepository.DeleteBackups<T>() -> void
Gu.Persist.Core.IRepository.Exists(System.IO.FileInfo file) -> bool
Gu.Persist.Core.IRepository.Exists(string fileName) -> bool
Gu.Persist.Core.IRepository.Exists<T>() -> bool
Gu.Persist.Core.IRepository.GetFileInfo(string fileName) -> System.IO.FileInfo
Gu.Persist.Core.IRepository.GetFileInfo<T>() -> System.IO.FileInfo
Gu.Persist.Core.IRepository.Read<T>() -> T
Gu.Persist.Core.IRepository.Read<T>(System.IO.FileInfo file) -> T
Gu.Persist.Core.IRepository.Read<T>(string fileName) -> T
Gu.Persist.Core.IRepository.ReadAsync<T>() -> System.Threading.Tasks.Task<T>
Gu.Persist.Core.IRepository.ReadAsync<T>(System.IO.FileInfo file) -> System.Threading.Tasks.Task<T>
Gu.Persist.Core.IRepository.ReadAsync<T>(string fileName) -> System.Threading.Tasks.Task<T>
Gu.Persist.Core.IRepository.ReadOrCreate<T>(System.Func<T> creator) -> T
Gu.Persist.Core.IRepository.ReadOrCreate<T>(System.IO.FileInfo file, System.Func<T> creator) -> T
Gu.Persist.Core.IRepository.ReadOrCreate<T>(string fileName, System.Func<T> creator) -> T
Gu.Persist.Core.IRepository.RemoveFromDirtyTracker<T>(T item) -> void
Gu.Persist.Core.IRepository.Rename(System.IO.FileInfo oldName, System.IO.FileInfo newName, bool overWrite) -> void
Gu.Persist.Core.IRepository.Rename(System.IO.FileInfo oldName, string newName, bool overWrite) -> void
Gu.Persist.Core.IRepository.Rename(string oldName, string newName, bool overWrite) -> void
Gu.Persist.Core.IRepository.Rename<T>(string newName, bool overWrite) -> void
Gu.Persist.Core.IRepository.Save<T>(System.IO.FileInfo file, System.IO.FileInfo tempFile, T item) -> void
Gu.Persist.Core.IRepository.Save<T>(System.IO.FileInfo file, T item) -> void
Gu.Persist.Core.IRepository.Save<T>(T item) -> void
Gu.Persist.Core.IRepository.Save<T>(string fileName, T item) -> void
Gu.Persist.Core.IRepository.SaveAsync<T>(System.IO.FileInfo file, System.IO.FileInfo tempFile, T item) -> System.Threading.Tasks.Task
Gu.Persist.Core.IRepository.SaveAsync<T>(System.IO.FileInfo file, T item) -> System.Threading.Tasks.Task
Gu.Persist.Core.IRepository.SaveAsync<T>(T item) -> System.Threading.Tasks.Task
Gu.Persist.Core.IRepository.SaveAsync<T>(string fileName, T item) -> System.Threading.Tasks.Task
Gu.Persist.Core.IRepository.Settings.get -> Gu.Persist.Core.IRepositorySettings
Gu.Persist.Core.IRepository.Tracker.get -> Gu.Persist.Core.IDirtyTracker
Gu.Persist.Core.IRepositorySettings
Gu.Persist.Core.IRepositorySettings.BackupSettings.get -> Gu.Persist.Core.BackupSettings
Gu.Persist.Core.IRepositorySettings.IsTrackingDirty.get -> bool
Gu.Persist.Core.IRepositorySettings.TempExtension.get -> string
Gu.Persist.Core.IRepositoryWithSettings
Gu.Persist.Core.IRepositoryWithSettings.Settings.get -> Gu.Persist.Core.IRepositorySettings
Gu.Persist.Core.ISingletonRepository
Gu.Persist.Core.ISingletonRepository.ClearCache() -> void
Gu.Persist.Core.ISingletonRepository.RemoveFromCache<T>(T item) -> void
Gu.Persist.Core.ISingletonRepository.SaveAndClose<T>(System.IO.FileInfo file, T item) -> void
Gu.Persist.Core.ISingletonRepository.SaveAndClose<T>(T item) -> void
Gu.Persist.Core.ISingletonRepository.SaveAndClose<T>(string fileName, T item) -> void
Gu.Persist.Core.IStreamRepository
Gu.Persist.Core.IStreamRepository.Exists(System.IO.FileInfo file) -> bool
Gu.Persist.Core.IStreamRepository.Exists(string fileName) -> bool
Gu.Persist.Core.IStreamRepository.Exists<T>() -> bool
Gu.Persist.Core.IStreamRepository.GetFileInfo(string fileName) -> System.IO.FileInfo
Gu.Persist.Core.IStreamRepository.GetFileInfo<T>() -> System.IO.FileInfo
Gu.Persist.Core.IStreamRepository.Settings.get -> Gu.Persist.Core.IRepositorySettings
Gu.Persist.Core.LockedFile
Gu.Persist.Core.LockedFile.Close() -> void
Gu.Persist.Core.LockedFile.Dispose() -> void
Gu.Persist.Core.LockedFile.DisposeAndDeleteFile() -> void
Gu.Persist.Core.LockedFile.File.get -> System.IO.FileInfo
Gu.Persist.Core.LockedFile.Stream.get -> System.IO.Stream
Gu.Persist.Core.RenamePair
Gu.Persist.Core.RenamePair.RenamePair(System.IO.FileInfo current, System.IO.FileInfo renamed) -> void
Gu.Persist.Core.RenamePair<T>
Gu.Persist.Core.RenamePair<T>.Current.get -> T
Gu.Persist.Core.RenamePair<T>.RenamePair(T current, T renamed) -> void
Gu.Persist.Core.RenamePair<T>.Renamed.get -> T
Gu.Persist.Core.Repository<TSetting>
Gu.Persist.Core.Repository<TSetting>.Backuper.get -> Gu.Persist.Core.IBackuper
Gu.Persist.Core.Repository<TSetting>.CanRename(System.IO.FileInfo oldName, System.IO.FileInfo newName) -> bool
Gu.Persist.Core.Repository<TSetting>.CanRename(System.IO.FileInfo oldName, string newName) -> bool
Gu.Persist.Core.Repository<TSetting>.CanRename(string oldName, string newName) -> bool
Gu.Persist.Core.Repository<TSetting>.CanRename<T>(string newName) -> bool
Gu.Persist.Core.Repository<TSetting>.ClearTrackerCache() -> void
Gu.Persist.Core.Repository<TSetting>.ExistsCore(System.IO.FileInfo file) -> bool
Gu.Persist.Core.Repository<TSetting>.ExistsCore<T>() -> bool
Gu.Persist.Core.Repository<TSetting>.GetFileInfoCore(string fileName) -> System.IO.FileInfo
Gu.Persist.Core.Repository<TSetting>.GetFileInfoCore<T>() -> System.IO.FileInfo
Gu.Persist.Core.Repository<TSetting>.ReadCore<T>() -> T
Gu.Persist.Core.Repository<TSetting>.ReadOrCreateCore<T>(System.Func<T> creator) -> T
Gu.Persist.Core.Repository<TSetting>.ReadOrCreateCore<T>(System.IO.FileInfo file, System.Func<T> creator) -> T
Gu.Persist.Core.Repository<TSetting>.RemoveFromDirtyTracker<T>(T item) -> void
Gu.Persist.Core.Repository<TSetting>.Rename(System.IO.FileInfo oldName, string newName, bool overWrite) -> void
Gu.Persist.Core.Repository<TSetting>.Rename(string oldName, string newName, bool overWrite) -> void
Gu.Persist.Core.Repository<TSetting>.Rename<T>(string newName, bool owerWrite) -> void
Gu.Persist.Core.Repository<TSetting>.Repository(System.Func<TSetting> settingsCreator, Gu.Persist.Core.IBackuper backuper, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.Repository<TSetting>.Repository(System.Func<TSetting> settingsCreator, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.Repository<TSetting>.Repository(TSetting settings, Gu.Persist.Core.IBackuper backuper, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.Repository<TSetting>.Repository(TSetting settings, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.Repository<TSetting>.SaveCore<T>(System.IO.FileInfo file, System.IO.FileInfo tempFile, T item) -> void
Gu.Persist.Core.Repository<TSetting>.SaveCore<T>(System.IO.FileInfo file, T item) -> void
Gu.Persist.Core.Repository<TSetting>.SaveCore<T>(T item) -> void
Gu.Persist.Core.Repository<TSetting>.SaveStreamCore(System.IO.FileInfo file, System.IO.FileInfo tempFile, System.IO.Stream stream) -> void
Gu.Persist.Core.Repository<TSetting>.SaveStreamCoreAsync(System.IO.FileInfo file, System.IO.FileInfo tempFile, System.IO.Stream stream) -> System.Threading.Tasks.Task
Gu.Persist.Core.Repository<TSetting>.Settings.get -> TSetting
Gu.Persist.Core.Repository<TSetting>.Tracker.get -> Gu.Persist.Core.IDirtyTracker
Gu.Persist.Core.RepositorySettings
Gu.Persist.Core.RepositorySettings.BackupSettings.get -> Gu.Persist.Core.BackupSettings
Gu.Persist.Core.RepositorySettings.IsTrackingDirty.get -> bool
Gu.Persist.Core.RepositorySettings.RepositorySettings(string directory, bool isTrackingDirty, Gu.Persist.Core.BackupSettings backupSettings, string extension = ".cfg", string tempExtension = ".tmp") -> void
Gu.Persist.Core.RepositorySettings.TempExtension.get -> string
Gu.Persist.Core.RestoreException
Gu.Persist.Core.RestoreException.RestoreException(System.Exception saveException, System.Exception innerException) -> void
Gu.Persist.Core.RestoreException.RestoreException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
Gu.Persist.Core.RestoreException.SaveException.get -> System.Exception
Gu.Persist.Core.SaveErrorEventArgs
Gu.Persist.Core.SaveErrorEventArgs.Exception.get -> System.Exception
Gu.Persist.Core.SaveErrorEventArgs.SaveErrorEventArgs(object item, System.IO.FileInfo file, System.Exception e) -> void
Gu.Persist.Core.SaveEventArgs
Gu.Persist.Core.SaveEventArgs.File.get -> System.IO.FileInfo
Gu.Persist.Core.SaveEventArgs.Item.get -> object
Gu.Persist.Core.SaveEventArgs.SaveEventArgs(object item, System.IO.FileInfo file) -> void
Gu.Persist.Core.Serialize<TSettings>
Gu.Persist.Core.Serialize<TSettings>.Serialize() -> void
Gu.Persist.Core.SerializedEqualsComparer<T>
Gu.Persist.Core.SerializedEqualsComparer<T>.SerializedEqualsComparer() -> void
Gu.Persist.Core.SingletonRepository<TSetting>
Gu.Persist.Core.SingletonRepository<TSetting>.CacheCore<T>(System.IO.FileInfo file, T item) -> void
Gu.Persist.Core.SingletonRepository<TSetting>.ClearCache() -> void
Gu.Persist.Core.SingletonRepository<TSetting>.RemoveFromCache<T>(T item) -> void
Gu.Persist.Core.SingletonRepository<TSetting>.SingletonRepository(System.Func<TSetting> settingsCreator, Gu.Persist.Core.IBackuper backuper, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.SingletonRepository<TSetting>.SingletonRepository(System.Func<TSetting> settingsCreator, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.SingletonRepository<TSetting>.SingletonRepository(TSetting settings, Gu.Persist.Core.IBackuper backuper, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.SingletonRepository<TSetting>.SingletonRepository(TSetting settings, Gu.Persist.Core.Serialize<TSetting> serialize) -> void
Gu.Persist.Core.TempFileSettings
Gu.Persist.Core.TempFileSettings.Directory.get -> string
Gu.Persist.Core.TempFileSettings.Extension.get -> string
Gu.Persist.Core.TempFileSettings.TempFileSettings(string directory, string extension) -> void
Gu.Persist.Core.WaitHandleExtensions
abstract Gu.Persist.Core.Repository<TSetting>.EnsureCanSave<T>(System.IO.FileInfo file, T item) -> void
abstract Gu.Persist.Core.Serialize<TSettings>.Clone<T>(T item, TSettings settings) -> T
abstract Gu.Persist.Core.Serialize<TSettings>.DefaultStructuralEqualityComparer<T>(TSettings settings) -> System.Collections.Generic.IEqualityComparer<T>
abstract Gu.Persist.Core.Serialize<TSettings>.FromStream<T>(System.IO.Stream stream, TSettings settings) -> T
abstract Gu.Persist.Core.Serialize<TSettings>.ToStream<T>(T item, System.IO.Stream stream, TSettings settings) -> void
abstract Gu.Persist.Core.Serialize<TSettings>.ToStream<T>(T item, TSettings settings) -> System.IO.Stream
abstract Gu.Persist.Core.SerializedEqualsComparer<T>.GetStream(T item) -> Gu.Persist.Core.IPooledStream
override Gu.Persist.Core.Backup.BackupFile.ToString() -> string
override Gu.Persist.Core.DataRepository<TSetting>.EnsureCanSave<T>(System.IO.FileInfo file, T item) -> void
override Gu.Persist.Core.DirectoryInfoComparer.Equals(System.IO.DirectoryInfo x, System.IO.DirectoryInfo y) -> bool
override Gu.Persist.Core.DirectoryInfoComparer.GetHashCode(System.IO.DirectoryInfo obj) -> int
override Gu.Persist.Core.FileInfoComparer.Equals(System.IO.FileInfo x, System.IO.FileInfo y) -> bool
override Gu.Persist.Core.FileInfoComparer.GetHashCode(System.IO.FileInfo obj) -> int
override Gu.Persist.Core.RestoreException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
override Gu.Persist.Core.SerializedEqualsComparer<T>.Equals(T x, T y) -> bool
override Gu.Persist.Core.SerializedEqualsComparer<T>.GetHashCode(T obj) -> int
override Gu.Persist.Core.SingletonRepository<TSetting>.CacheAndTrackCore<T>(System.IO.FileInfo file, T item) -> void
override Gu.Persist.Core.SingletonRepository<TSetting>.EnsureCanSave<T>(System.IO.FileInfo file, T item) -> void
override Gu.Persist.Core.SingletonRepository<TSetting>.ReadAsync<T>(System.IO.FileInfo file) -> System.Threading.Tasks.Task<T>
override Gu.Persist.Core.SingletonRepository<TSetting>.ReadCore<T>(System.IO.FileInfo file) -> T
override Gu.Persist.Core.SingletonRepository<TSetting>.Rename(System.IO.FileInfo oldName, System.IO.FileInfo newName, bool overWrite) -> void
static Gu.Persist.Core.Backup.Backuper.Create(Gu.Persist.Core.BackupSettings setting) -> Gu.Persist.Core.IBackuper
static Gu.Persist.Core.BackupSettings.ValidateTimestampFormat(string format) -> void
static Gu.Persist.Core.Default.BackupSettings(System.IO.DirectoryInfo directory) -> Gu.Persist.Core.BackupSettings
static Gu.Persist.Core.Default.DataRepositorySettings(System.IO.DirectoryInfo directory) -> Gu.Persist.Core.DataRepositorySettings
static Gu.Persist.Core.Default.RepositorySettings(System.IO.DirectoryInfo directory) -> Gu.Persist.Core.RepositorySettings
static Gu.Persist.Core.Directories.ApplicationData.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.CommonApplicationData.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.CommonDocuments.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.CommonProgramFiles.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.CommonProgramFilesX86.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.CurrentDirectory.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.Default.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.DefaultBackup.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.Desktop.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.DesktopDirectory.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.LocalApplicationData.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.MyDocuments.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.ProgramFiles.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.ProgramFilesX86.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.Directories.TempDirectory.get -> System.IO.DirectoryInfo
static Gu.Persist.Core.LockedFile.Create(System.IO.FileInfo file, System.Func<System.IO.FileInfo, System.IO.Stream> stream) -> Gu.Persist.Core.LockedFile
static Gu.Persist.Core.LockedFile.CreateAsync(System.IO.FileInfo file, System.TimeSpan timeout) -> System.Threading.Tasks.Task<Gu.Persist.Core.LockedFile>
static Gu.Persist.Core.LockedFile.CreateIfExists(System.IO.FileInfo file, System.Func<System.IO.FileInfo, System.IO.Stream> stream) -> Gu.Persist.Core.LockedFile
static Gu.Persist.Core.WaitHandleExtensions.AsTask(this System.Threading.WaitHandle handle) -> System.Threading.Tasks.Task
static Gu.Persist.Core.WaitHandleExtensions.AsTask(this System.Threading.WaitHandle handle, System.TimeSpan timeout) -> System.Threading.Tasks.Task
static readonly Gu.Persist.Core.Backup.NullBackuper.Default -> Gu.Persist.Core.Backup.NullBackuper
static readonly Gu.Persist.Core.BackupSettings.DefaultExtension -> string
static readonly Gu.Persist.Core.BackupSettings.DefaultTimeStampFormat -> string
static readonly Gu.Persist.Core.DirectoryInfoComparer.Default -> Gu.Persist.Core.DirectoryInfoComparer
static readonly Gu.Persist.Core.FileInfoComparer.Default -> Gu.Persist.Core.FileInfoComparer
static readonly Gu.Persist.Core.RenamePair.EmptyArray -> System.Collections.Generic.IReadOnlyList<Gu.Persist.Core.RenamePair>
static readonly Gu.Persist.Core.RepositorySettings.DefaultBackupDirectoryName -> string
virtual Gu.Persist.Core.Backup.Backuper.AfterSave(Gu.Persist.Core.LockedFile file) -> void
virtual Gu.Persist.Core.Backup.Backuper.Backup(Gu.Persist.Core.LockedFile file) -> void
virtual Gu.Persist.Core.Backup.Backuper.Backup(System.IO.FileInfo file) -> void
virtual Gu.Persist.Core.Backup.Backuper.Backup(System.IO.FileInfo file, System.IO.FileInfo backup) -> void
virtual Gu.Persist.Core.Backup.Backuper.BeforeSave(System.IO.FileInfo file) -> bool
virtual Gu.Persist.Core.Backup.Backuper.Restore(System.IO.FileInfo file, System.IO.FileInfo backup) -> void
virtual Gu.Persist.Core.Backup.Backuper.TryRestore(System.IO.FileInfo file) -> bool
virtual Gu.Persist.Core.DataRepository<TSetting>.Delete(System.IO.FileInfo file, bool deleteBackups) -> void
virtual Gu.Persist.Core.DataRepository<TSetting>.Delete(string fileName, bool deleteBackups) -> void
virtual Gu.Persist.Core.DataRepository<TSetting>.Delete<T>(bool deleteBackups) -> void
virtual Gu.Persist.Core.Repository<TSetting>.CacheAndTrackCore<T>(System.IO.FileInfo file, T item) -> void
virtual Gu.Persist.Core.Repository<TSetting>.Clone<T>(T item) -> T
virtual Gu.Persist.Core.Repository<TSetting>.DeleteBackups(System.IO.FileInfo file) -> void
virtual Gu.Persist.Core.Repository<TSetting>.DeleteBackups(string fileName) -> void
virtual Gu.Persist.Core.Repository<TSetting>.DeleteBackups<T>() -> void
virtual Gu.Persist.Core.Repository<TSetting>.Exists(System.IO.FileInfo file) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.Exists(string fileName) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.Exists<T>() -> bool
virtual Gu.Persist.Core.Repository<TSetting>.GetFileInfo(string fileName) -> System.IO.FileInfo
virtual Gu.Persist.Core.Repository<TSetting>.GetFileInfo<T>() -> System.IO.FileInfo
virtual Gu.Persist.Core.Repository<TSetting>.IsDirty<T>(System.IO.FileInfo file, T item) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.IsDirty<T>(System.IO.FileInfo file, T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.IsDirty<T>(T item) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.IsDirty<T>(T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.IsDirty<T>(string fileName, T item) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.IsDirty<T>(string fileName, T item, System.Collections.Generic.IEqualityComparer<T> comparer) -> bool
virtual Gu.Persist.Core.Repository<TSetting>.Read<T>() -> T
virtual Gu.Persist.Core.Repository<TSetting>.Read<T>(System.IO.FileInfo file) -> T
virtual Gu.Persist.Core.Repository<TSetting>.Read<T>(string fileName) -> T
virtual Gu.Persist.Core.Repository<TSetting>.ReadAsync<T>() -> System.Threading.Tasks.Task<T>
virtual Gu.Persist.Core.Repository<TSetting>.ReadAsync<T>(System.IO.FileInfo file) -> System.Threading.Tasks.Task<T>
virtual Gu.Persist.Core.Repository<TSetting>.ReadAsync<T>(string fileName) -> System.Threading.Tasks.Task<T>
virtual Gu.Persist.Core.Repository<TSetting>.ReadCore<T>(System.IO.FileInfo file) -> T
virtual Gu.Persist.Core.Repository<TSetting>.ReadOrCreate<T>(System.Func<T> creator) -> T
virtual Gu.Persist.Core.Repository<TSetting>.ReadOrCreate<T>(System.IO.FileInfo file, System.Func<T> creator) -> T
virtual Gu.Persist.Core.Repository<TSetting>.ReadOrCreate<T>(string fileName, System.Func<T> creator) -> T
virtual Gu.Persist.Core.Repository<TSetting>.Rename(System.IO.FileInfo oldName, System.IO.FileInfo newName, bool overWrite) -> void
virtual Gu.Persist.Core.Repository<TSetting>.Save<T>(System.IO.FileInfo file, System.IO.FileInfo tempFile, T item) -> void
virtual Gu.Persist.Core.Repository<TSetting>.Save<T>(System.IO.FileInfo file, T item) -> void
virtual Gu.Persist.Core.Repository<TSetting>.Save<T>(T item) -> void
virtual Gu.Persist.Core.Repository<TSetting>.Save<T>(string fileName, T item) -> void
virtual Gu.Persist.Core.Repository<TSetting>.SaveAsync<T>(System.IO.FileInfo file, System.IO.FileInfo tempFile, T item) -> System.Threading.Tasks.Task
virtual Gu.Persist.Core.Repository<TSetting>.SaveAsync<T>(System.IO.FileInfo file, T item) -> System.Threading.Tasks.Task
virtual Gu.Persist.Core.Repository<TSetting>.SaveAsync<T>(T item) -> System.Threading.Tasks.Task
virtual Gu.Persist.Core.Repository<TSetting>.SaveAsync<T>(string fileName, T item) -> System.Threading.Tasks.Task
virtual Gu.Persist.Core.SingletonRepository<TSetting>.Cache<T>(System.IO.FileInfo file, T item) -> void
virtual Gu.Persist.Core.SingletonRepository<TSetting>.SaveAndClose<T>(System.IO.FileInfo file, T item) -> void
virtual Gu.Persist.Core.SingletonRepository<TSetting>.SaveAndClose<T>(T item) -> void
virtual Gu.Persist.Core.SingletonRepository<TSetting>.SaveAndClose<T>(string fileName, T item) -> void
